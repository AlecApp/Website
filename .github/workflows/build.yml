name: Build & Deploy Image
on:
  workflow_dispatch:
jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Master Branch
        uses: actions/checkout@master
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Should probably convert this to :demo for consistency with TF environment name?
      - name: Set Env Name (demo)
        if: github.ref == 'refs/heads/main'
        run: echo "ENVIRONMENT_NAME=demo" >> $GITHUB_ENV
      
      - name: Set Env Name (dev)
        if: github.ref != 'refs/heads/main'
        run: echo "ENVIRONMENT_NAME=dev" >> $GITHUB_ENV
      
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          context: .
          tags: ghcr.io/alecapp/website:${{ env.ENVIRONMENT_NAME }}

  deploy:
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    name: Deploy to Environment
    runs-on: ubuntu-latest
    steps:
     # Note: AWS CLI is already installed on GitHub runners
     # - name: Install AWS CLI
     #   run: pip install awscli --upgrade
      
      - name: Set Env Name (demo)
        if: github.ref == 'refs/heads/main'
        run: echo "ENVIRONMENT_NAME=demo" >> $GITHUB_ENV
      
      - name: Set Env Name (dev)
        if: github.ref == 'refs/heads/dev'
        run: echo "ENVIRONMENT_NAME=dev" >> $GITHUB_ENV
      
      # The instance's startup script is configured in Terraform to pull & run the latest container on reboot & initial startup.
      - name: Reboot Instance
        run: |
          echo $(aws ec2 describe-instances --filters Name=tag:Name,Values="website-${{ env.ENVIRONMENT_NAME }}" | jq '.Reservations[0].Instances[0].InstanceId') \
          | sed -e 's/"//g'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_GH_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_GH_SECRET_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"